//#define DEBUG

#define MOTOR_SPEED 100
#define LEFT 1
#define RIGHT 2
#define NONE 0
#define TIMEOUT 2050

#define FORWARD 1
#define INTERSECTION 2
#define LIGHT_SEARCH 3
#define BACKWORDS 4
#define CARRY 5
#define STOP 10

#define RIGHT_INTER_SENSOR 5
#define LEFT_INTER_SENSOR 3
#define LINE_SENSOR 4
#define RIGHT_LIGHT_SENSOR 16
#define LEFT_LIGHT_SENSOR 2
#define CENTER_LIGHT_SENSOR 22
#define LIGHT_THRESHOLD 225


int prev_inter_num; //variable that keeps track of the previous intersection number. Allows us to track direciton
int inter_num;  //Variable to keep track of the intersection number

//function to control the motor speeds
void move_motors(int leftSpeed, int rightSpeed)
{
    motor(0, rightSpeed);
    motor(2, leftSpeed);
}

//Turn off both motors
void stop(void)
{
    off(0);
    off(2);
}

//returns the value of the analog sensor
int check_sensor(int value)
{
    return analog(value);
}

//closes the claw for the bot
void close_claw(void)
{
    motor(4, 30);
    sleep(1.0);
    motor(4, 0);
}

//opens the claw for the bot
void open_claw(void)
{
    motor(4, -30);
    sleep(1.0);
    motor(4, 0);
}

//check if the bot is at an intersection
int at_intersection_test(int left_val, int right_val)
{
    int ret_val = 0;
    int right_sen = check_sensor(RIGHT_INTER_SENSOR);
    int left_sen = check_sensor(LEFT_INTER_SENSOR);
    
    //If the right or left sensor arent close to the over the board value we have found an interesction
    if( !((right_sen > (right_val - 10)) && (right_sen < (right_val + 10))) )
      {
        if( !((left_sen > (left_val - 10)) && (left_sen < (left_val + 10))) )
        {
           ret_val = 1;        
        }
    }
    
    return ret_val;
}


//The bot will turn 
void turn_bot(int passLimit, int direction)
{
    int value;
    int left_motor = MOTOR_SPEED;
    int right_motor = MOTOR_SPEED;
    
    //change the motor values based on the direction the bot is to turn
    if(direction == LEFT)
      {
        left_motor *= -1; 
    }
    else
      {
        right_motor *= -1;
    }
    
    //turn the bot
    move_motors(left_motor, right_motor);
    
    //Check the current sensor value
    value = check_sensor(LINE_SENSOR);
    
    //while the line sensor is over the tape turn
    while(((value > (passLimit - 10)) && (value < (passLimit + 10))))
      {
        move_motors(left_motor, right_motor); 
        
        value = check_sensor(LINE_SENSOR);
    }
    
    //turn the bot a little past the line
    move_motors(left_motor, right_motor); 
    sleep(0.3);
    
    //Check the current sensor value
    value = check_sensor(LINE_SENSOR);
    
    //While the line sensor isnt over the tape turn
    while( !((value > (passLimit - 10)) && (value < (passLimit + 10))))
      {
        move_motors(left_motor, right_motor);  
        
        value = check_sensor(LINE_SENSOR);
    }
}

//function for the bot to find the line when it moves off it
int find_line(int passLimit)
{
    int timeout = 50;
    int counter = 0;
    int value;
    
    while(timeout < (TIMEOUT))
      {
        
        //Move left
        move_motors(-MOTOR_SPEED, MOTOR_SPEED);
        //Check if we found the tape
        while(counter < timeout)
          {
            //Check the current sensor value
            value = check_sensor(LINE_SENSOR);
            
            //Check if the value is in range
            if((value > (passLimit - 10)) && (value < (passLimit + 10)))
              {
                //stop();
                return 1;
            }
            
            counter++;
        } 
        
        timeout += 50;
        move_motors(MOTOR_SPEED, -MOTOR_SPEED);
        
        //Check if we found the tape
        while(counter < timeout)
          {
            //Check the current sensor value
            value = check_sensor(LINE_SENSOR);
            
            //Check if the value is in range
            if((value > (passLimit - 10)) && (value < (passLimit + 10)))
              {
                //stop();
                return 1;
            }
            
            counter++;
        }
    }
}

//Main
int main(void)
{
    int i = 0;
    //variables
    
    int state = FORWARD;
    //int state = BACKWORDS;//FOR TESTING ONLY
    int inter_count = 0;
    int passLimit = 0;
    int passLimit_Right = 0;
    int passLimit_Left = 0;
    int inter = 0;
    
    int sen_value;
    int direction = NONE;
    
    //default the array of checked positions
    for(i = 0; i < 10; i++)
      checked_array[i] = 0;
    
    inter_num = 0;
    
    //Dont run any of the logic until the start button is pressed
    while(start_button() == 0);
    
        //Get the average IR sensor value
    passLimit = passLimit + check_sensor(LINE_SENSOR);
    passLimit = passLimit + check_sensor(LINE_SENSOR);
    passLimit = passLimit + check_sensor(LINE_SENSOR);
    passLimit = passLimit / 3;
    
    //Get the average IR sensor value
    passLimit_Left += check_sensor(LEFT_INTER_SENSOR);
    passLimit_Left += check_sensor(LEFT_INTER_SENSOR);
    passLimit_Left += check_sensor(LEFT_INTER_SENSOR);
    passLimit_Left /= 3;
    
    //Get the average IR sensor value
    passLimit_Right += check_sensor(RIGHT_INTER_SENSOR);
    passLimit_Right += check_sensor(RIGHT_INTER_SENSOR);
    passLimit_Right += check_sensor(RIGHT_INTER_SENSOR);
    passLimit_Right /= 3;
    
    while(stop_button() != 1)
      {
        //gets the 
        sen_value = check_sensor(LINE_SENSOR);
        switch(state)
          {
            case FORWARD:
              move_motors(70, 70);
            
            //if we are at an intersection
            if(at_intersection_test(passLimit_Left, passLimit_Right) == 1)
              {
                state = INTERSECTION;
                //allows us to determine our direction
                //check if we have already counted this intersection
                if(inter == 0)
                  {
                    inter_num++;
                }
                
                //we have checked this intersection
                inter = 1;
            }
            else
              {
                inter = 0;
            }
            //if the bot lost the line find it again
            if(!(sen_value > (passLimit - 10)) && (sen_value < (passLimit + 10)))
              {
                find_line(passLimit);
            }           
            break;
            case INTERSECTION:
              //Check both side light sensors for a change in value
              //if found turn towards the light
              if(check_sensor(LEFT_LIGHT_SENSOR) < LIGHT_THRESHOLD)
              {
                direction = LEFT;
                move_motors(70, 70);
                sleep(0.2);
                turn_bot(passLimit, direction);
                
                state = LIGHT_SEARCH;
            }
            else if(check_sensor(RIGHT_LIGHT_SENSOR) < LIGHT_THRESHOLD)
              {
                direction = RIGHT;
                move_motors(70, 70);
                sleep(0.2);
                turn_bot(passLimit, direction);
                
                state = LIGHT_SEARCH;
            }
            else
            {
                //found nothing go back to the forward state
                direction = NONE;
                move_motors(70, 70);
                sleep(0.6);
                state = FORWARD;
            }
            break;
            case LIGHT_SEARCH:
              move_motors(70, 70);
            
            //move down the path searching for the block
            //if at any time we find the block move to the backwords state
            if((sen_value > (passLimit - 10)) && (sen_value < (passLimit + 10)))
              {
                if(check_sensor(CENTER_LIGHT_SENSOR) < 30)
                  {
                    close_claw();
                    state = BACKWORDS;
                }
            }
            else
              {
                if(check_sensor(CENTER_LIGHT_SENSOR) < 30)
                  {
                    close_claw();
                    state = BACKWORDS;
                }
                else
                  {
                    find_line(passLimit);
                }
            }
            break;
            case BACKWORDS:
              move_motors(-70, -70);
            
            //if we have reached an intersection turn towards the goal
            if(at_intersection_test(passLimit_Left, passLimit_Right) == 1)
              { 
                if(direction == LEFT)
                  {
                    move_motors(70, 70);
                    sleep(0.3);
                    turn_bot(passLimit, RIGHT);
                    
                }
                else if(direction == RIGHT)
                  {
                    move_motors(70, 70);
                    sleep(0.3);
                    turn_bot(passLimit, LEFT);
                }
                
                //we have counted this intersection
                inter = 1;
                state = CARRY;
            }
            else if(!(sen_value > (passLimit - 10)) && (sen_value < (passLimit + 10)))
              {
                find_line(passLimit);
            }
            break;
            case CARRY:
              move_motors(70, 70);
            
              //if we are at an intersection
              if(at_intersection_test(passLimit_Left, passLimit_Right) == 1)
              {
                //check if we ahve counted this intersection
                if(inter == 0)
                  {
                    inter_num++;
                }
                //.if we have reached the goal drop the block
                if(inter_num == 5)
                  {
                    open_claw();
                    state = STOP;
                }
                
                inter = 1;
            }
            else
              {
                inter = 0;
            }
              if(!(sen_value > (passLimit - 10)) && (sen_value < (passLimit + 10)))
              {
                find_line(passLimit);
              } 
              break;
            default:
              stop();
            break;
        }
    }    
}
