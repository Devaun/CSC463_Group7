#define RIGHT 1
#define LEFT 2
#define FORWARD 3
#define STOP 4
#define TIMEOUT 1250

//change to bot: added tracks to front tires
//Lowered the sensor
//removed the bumper to create more room and remove the shadow
//added brackets to hold the handyboard

void forward(int rightSpeed, int leftSpeed)
{
    motor(0, rightSpeed);
    motor(2, leftSpeed);
}

int check_sensor(void)
{
    return analog(5);
}

void turn_right(int ret)
{
    //Move right
    if(!ret)
      {
        motor(0, 50);
        motor(2, 50);
    }
    else
      {
        motor(0, -50);
        motor(2, -50);
    }
}

void turn_left(int ret)
{
    //Move left
    if(!ret)
    {
        motor(0, -50);
        motor(2, -50);
    }
    else
    {
        motor(0, 50);
        motor(2, 50);
    }
}

//Turn off both motors
void stop(void)
{
    off(0);
    off(2);
}

int check_right(int passLimit)
{
    int counter = 0;
    int value;
    
    //Move right
    turn_right(0);
    
    //Check if we found the tape
    while(counter < TIMEOUT)
    {
        //Check the current sensor value
        value = check_sensor();
        
        //Check if the value is in range
        if((value > (passLimit - 10)) && (value < (passLimit + 10)))
        {
            return 1;
        }
        
        counter++;
    }
    
    //stop turning the bot
    stop();
    
    //If tape no found reset bot position
    counter = 0;
    turn_right(1);
    
    //reset the bot's position
    while(counter < (TIMEOUT + TIMEOUT) + 500)
    {     
        counter++;
    }
    
    //return false
    return 0;
}

int check_left(int passLimit)
{
    int counter = 0;
    int value;
    
    //Move left
    turn_left(0);
    
    //Check if we found the tape
    while(counter < TIMEOUT)
    {
        //Check the sensor value
        value = check_sensor();
        
        //If the value is in range return true
        if((value > (passLimit - 10)) && (value < (passLimit + 10)))
        {
            return 1;
        }
        
        counter++;
    }
    
    //stop turning the bot
    stop();
    
    //If tape no found reset bot position
    counter = 0;
    turn_left(1);
    
    //Reset the bot's position
    while(counter < (TIMEOUT + TIMEOUT) + 500)
    {     
        counter++;
    }
    
    //we have not found the tape
    return 0;
}

int main(void)
{
    //variables
    int direction = FORWARD;
    int value;
    int passLimit = 0;
    
    while(start_button() == 0);
    
    //Get the average Light sensor value
    passLimit = passLimit + check_sensor();
    passLimit = passLimit + check_sensor();
    passLimit = passLimit + check_sensor();
    passLimit = passLimit / 3;
    
    while(1)
    {        
        switch(direction)
        {
            case FORWARD:
            value = check_sensor();
            
              //As long as we have found the tape, move forawrd
              while((value > (passLimit - 10)) && (value < (passLimit + 10)))
              {
                //move forward
                forward(-50, 50);
                
                //Check the new sensor value
                value = check_sensor();
              }
            
              //When we lose the tape we will check right
              direction = RIGHT;
              break;
            case RIGHT:
              //Check if the tape is to the right of the bot
              if(check_right(passLimit) == 1)
              {
                direction = FORWARD;
              } 
              else
              {
                //check left
                direction = LEFT;
              }
              break;
            case LEFT:
              //Check if the tape is to the left of the bot
              if(check_left(passLimit) == 1)
              {
                direction = FORWARD;
              }
              else
              {
                //We have lost the tape, just stop
                printf("Lost or end");
                direction = STOP;
              }
              break;
            default:
              stop();
              direction = STOP;
              break;
        }
    }  
}
