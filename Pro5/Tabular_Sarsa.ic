//Group 7
//Devaun G
//James M
//Jeff

//defines for the bot states
#define START 1
#define STOP 0

//defines for sensor positions
#define FRONT_LEFT 10
#define FRONT_RIGHT 9
#define LEFT 15
#define RIGHT 12

//defines for tabular sarsa action states
#define FORWARD 0
#define LEFT_TURN 1
#define REVERSE 2
#define RIGHT_TURN 3

//array of action Q-values
int q_vals[4];

//global variables for current & next action
int currentAction;
int nextAction;

//function to caculate the reward/punishment for the bot
int reward(int runNum)
{
    //reward variable
    int reward = 0;
    
    if(currentAction != REVERSE)
      {
        //If the left front touch sensor is being pressed punish the bot...
        if(digital(FRONT_LEFT) == 1)
          {
            reward -= 10;
        }
        else
          {
            //reward the bot
            reward += 2;
        }
        
        //If the right front touch sensor is being pressed punish the bot...
        if(digital(FRONT_RIGHT) == 1)
          {
            reward -= 10;
        }
        else
          {
            //reward the bot
            reward += 2;
        }
        
        //If the left touch sensor is being pressed punish the bot...
        if(digital(LEFT) == 1)
          {
            reward -= 2;
        }
        else
          {
            //reward the bot
            reward += 1;
        }
        
        //If the right touch sensor is being pressed punish the bot...
        if(digital(RIGHT) == 1)
          {
            reward -= 2;
        }
        else
          {
            //reward the bot
            reward += 1;
        }
    }
    //time based punishments
    switch(currentAction)
      {
        case LEFT_TURN:
          reward -= (16 * (runNum / 100));
        break;
        case RIGHT_TURN:
          reward -= (16 * (runNum / 100));
        break;
        case REVERSE:
          reward -= (8 * (runNum / 100));
        break;
        default:
          break;
    }
    
    //returnt he bots rewards
    return reward;
}

//function to find out the bots next action
int getAction()
{
    int max = 0;
    int i = 0;
    int total = 0;
    
    //check if the q_vals have reached the allowed minimum
    for(i = 0; i < 4; i++)
      {
        total += q_vals[i];
    }
    
    //If the sum of the q_vals is 0 then reset their values
    if(total == 0)
      {
        for(i = 0; i < 4; i++)
          {
            q_vals[i] = 200;
        }
    }
    else
      {
        //Search all the Q values for the max
        for(i = 1; i < 4; i++)
          {
            if(q_vals[max] < q_vals[i])
              {
                max = i;
            }
        }
    }
    
    //return the cell index of the max Q-value
    return max;
}

//function to control the motors
void move_motors(int rightSpeed, int leftSpeed)
{
    motor(0, rightSpeed);
    motor(2, leftSpeed);
}

//function call to make the bot take an action
void takeAction(void)
{
    switch(currentAction)
      {
        case FORWARD:
          //Moves the bot forward
          move_motors(50, 50);
        break;
        case REVERSE:
          //moves the bot in reverse
          move_motors(-50, -50);
        break;
        case LEFT_TURN:
          //makes the bot turn to the left
          move_motors(50, -50);
        break;
        case RIGHT_TURN:
          //makes the bot turn to the right
          move_motors(-50, 50);
        break;
    }
}

//Turn off both motors
void stop(void)
{
    off(0);
    off(2);
}

int main(void)
{
    //variables
    int runNum = 0; //counts how long the bot has been doing the same action
    int i = 0; //counter for a for loop
    int state = START; //allows the bot to be stopped and restarted
    
    //default the values
    for(; i < 4; i++)
      {
        q_vals[i] = 200;
    }
    
    //Dont run any of the logic until the start button is pressed
    while(start_button() == 0);
    
    //get the first action for the bot
    currentAction = getAction();
    
    while(1)
      {
        switch(state)
          {
            case START:
              //take an action
              takeAction();
            
            //Modify the Q-value for that action
            q_vals[currentAction] += reward(runNum);
            
            //If a q_val would go negative set it to 0
            if(q_vals[currentAction] < 0)
              {
                q_vals[currentAction] = 0;
            }
            
            //increase the run counter
            runNum++;
            
            //find the bots next action
            nextAction = getAction();
            
            //if the next action isnt the current one reset the run counter
            if(nextAction != currentAction)
              {
                runNum = 0;
            }
            
            //Set the current action to the enxt action
            currentAction = nextAction;
            
            //if the stop button is pressed stop the bot
            if(stop_button() == 1)
              {
                state = STOP;
                stop();
            }
            break;
            case STOP:
              //If the start button is pressed resart the bot
              if(start_button() == 1)
              {
                state = START;
            }
            break;
        }
    }
}
